[{"/Users/music/apps/in-tune/ui/src/index.tsx":"1","/Users/music/apps/in-tune/ui/src/App.tsx":"2","/Users/music/apps/in-tune/ui/src/Keys/index.ts":"3","/Users/music/apps/in-tune/ui/src/Components/BarAndSelectors/index.ts":"4","/Users/music/apps/in-tune/ui/src/Keys/keys.ts":"5","/Users/music/apps/in-tune/ui/src/Components/BarAndSelectors/BarAndSelectors.tsx":"6","/Users/music/apps/in-tune/ui/src/Components/MusicNotation/Bar/index.ts":"7","/Users/music/apps/in-tune/ui/src/Components/Selectors/Keys/index.ts":"8","/Users/music/apps/in-tune/ui/src/Components/Selectors/Scales/index.ts":"9","/Users/music/apps/in-tune/ui/src/Components/MusicNotation/Bar/Bar.tsx":"10","/Users/music/apps/in-tune/ui/src/Components/Selectors/Keys/Keys.tsx":"11","/Users/music/apps/in-tune/ui/src/Components/Selectors/Scales/Scales.tsx":"12"},{"size":174,"mtime":1607557436000,"results":"13","hashOfConfig":"14"},{"size":7728,"mtime":1608241333000,"results":"15","hashOfConfig":"14"},{"size":23,"mtime":1607557436000,"results":"16","hashOfConfig":"14"},{"size":34,"mtime":1607557436000,"results":"17","hashOfConfig":"14"},{"size":343,"mtime":1607557436000,"results":"18","hashOfConfig":"14"},{"size":1368,"mtime":1607557436000,"results":"19","hashOfConfig":"14"},{"size":22,"mtime":1607557436000,"results":"20","hashOfConfig":"14"},{"size":23,"mtime":1607557436000,"results":"21","hashOfConfig":"14"},{"size":25,"mtime":1607557436000,"results":"22","hashOfConfig":"14"},{"size":1298,"mtime":1607557436000,"results":"23","hashOfConfig":"14"},{"size":1046,"mtime":1607557436000,"results":"24","hashOfConfig":"14"},{"size":1017,"mtime":1607557436000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ntbj5m",{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/music/apps/in-tune/ui/src/index.tsx",[],["53","54"],"/Users/music/apps/in-tune/ui/src/App.tsx",["55","56","57","58","59"],"import React, { useState, useReducer, useEffect } from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Button, Input, Icon } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { ScaleType, Interval } from \"@tonaljs/tonal\"\n\nimport './App.css';\nimport { BarAndSelectors } from './Components/BarAndSelectors'\nimport { KeysToRootNoteMap } from './Keys'\n\nconst { NODE_ENV } = process.env\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst BarsWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n\n  max-width: 1200px;\n`\n\nconst InputsWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  margin: 0px 0px 15px 0px;\n`\n\nconst TemposWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\ntype CurrentLocationMarkerProps = {\n  left: string;\n  top: string;\n  transitionDuration: string;\n}\nconst CurrentLocationMarker = styled.div`\n  position: absolute;\n\n  height: 120px;\n  width: 5px;\n\n  left: ${(props: CurrentLocationMarkerProps) => props.left};\n  top: ${(props: CurrentLocationMarkerProps) => props.top};\n\n  background-color: red;\n\n  transition-property: left;\n  transition-duration: ${(props: CurrentLocationMarkerProps) => props.transitionDuration};\n  transition-timing-function: linear;\n`\n\ntype BarState = {\n  musicKey: string;\n  scale: string;\n}\n\nconst initialBars: BarState[] = [\n  {\n    musicKey: \"C\",\n    scale: \"major\",\n  }\n]\n\ntype Action = {\n  idx: number;\n  type: string;\n  data: string;\n}\n\ntype BarReducerFn = (state: BarState[], action: Action) => BarState[];\n\nconst barReducer: BarReducerFn = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE_KEY\":\n      return state.map((bar, idx) => {\n        if (idx === action.idx) {\n          return { ...bar, musicKey: action.data }\n        }\n\n        return bar\n      })\n\n    case \"CHANGE_SCALE\":\n      return state.map((bar, idx) => {\n        if (idx === action.idx) {\n          return { ...bar, scale: action.data }\n        }\n\n        return bar\n      })\n\n    case \"ADD_BAR\":\n      return [...state, { musicKey: \"C\", scale: \"major\" }]\n\n    case \"REMOVE_BAR\":\n    return [...state].filter((bar, idx) => {\n      return idx !== action.idx\n    });\n\n    default:\n      return state;\n  }\n}\n\nfunction App() {\n  const [bars, dispatch] = useReducer(\n    barReducer,\n    initialBars,\n  );\n  const [tempo, setTempo] = useState(108)\n  const [beatsPerBar, setBeatsPerBar] = useState(4)\n  const [msPerBeat, setMSPerBeat] = useState(0)\n  const [msPerBar, setMSPerBar] = useState(0)\n\n  const [icon, setIcon] = useState('play')\n  const [intrvl, setIntrvl] = useState(0)\n  const [startTime, setStartTime] = useState(0)\n  const [top, setTop] = useState(62.5)\n  const [left, setLeft] = useState(0)\n  const [transitionTime, setTransitionTime] = useState(0)\n  \n  const [currentBar, setCurrentBar] = useState(0)\n  const [currentRow, setCurrentRow] = useState(0)\n\n  const handleKeyChange = (idx: number, data: string) => {\n    dispatch({ idx, type: 'CHANGE_KEY', data });\n  };\n  const handleScaleChange = (idx: number, data: string) => {\n    dispatch({ idx, type: 'CHANGE_SCALE', data });\n  };\n\n  useEffect(() => {\n    const tmpMSPerBeat = (60 * 1000) / tempo\n    const tmpMSPerBar = tmpMSPerBeat * beatsPerBar\n\n    setMSPerBeat(tmpMSPerBeat)\n    setMSPerBar(tmpMSPerBar)\n  }, [tempo, beatsPerBar])\n\n  useEffect(() => {\n    if (icon === 'play') {\n      clearInterval(intrvl)\n      setStartTime(0)\n      setCurrentBar(-1)\n      setCurrentRow(0)\n      setLeft(0)\n      setTop(62.5)\n      setTransitionTime(0)\n\n      if (NODE_ENV === 'production') {\n        // @ts-ignore\n        // eslint-disable-next-line\n        external.invoke(`stop`)\n      }\n    } else {\n      setCurrentBar(0)\n      const t = new Date().getTime()\n      setStartTime(t)\n      ;((tmpTime) => {\n        const tmpInterval = setInterval(() => {\n          const deltaMS = new Date().getTime() - tmpTime\n          const quotient = deltaMS / msPerBar\n          const tmpCurrentBar = Math.round(quotient)\n          setCurrentBar(tmpCurrentBar%bars.length)\n        }, msPerBar)\n        setIntrvl(tmpInterval)\n      })(t);\n    }\n  }, [icon])\n\n  useEffect(() => {\n    if (currentBar < 0) {\n      setLeft(0)\n      setTransitionTime(0)\n      setTop(62.5)\n\n    } else {\n      if (currentBar === 0) {\n        setLeft(0)\n        setTransitionTime(0)\n      }\n\n      // note: 4 bars per line\n      const tmpCurrentRow = Math.floor(currentBar / 4)\n      setCurrentRow(tmpCurrentRow)\n    }\n  }, [currentBar])\n\n  useEffect(() => {\n    setLeft(0)\n    setTransitionTime(0)\n    setTop((currentRow) * 219.5 + 62.5)\n  }, [currentRow])\n\n  useEffect(() => {\n    if (left === 0 && icon === 'stop') {\n      const numRows = Math.ceil(bars.length / 4)\n      let numBarsInCurrentRow = (currentRow + 1) !== numRows ? 4 : bars.length % 4;\n      if (numBarsInCurrentRow === 0) {\n        numBarsInCurrentRow = 4\n      }\n      \n      // note: 300px per bar\n      setLeft(numBarsInCurrentRow * 300)\n      setTransitionTime(msPerBar*numBarsInCurrentRow)\n    }\n  }, [left, icon])\n\n  useEffect(() => {\n    console.log(`currentBar: ${currentBar}`)\n    if (currentBar < 0) {\n      return\n    }\n\n    if (NODE_ENV === 'production') {\n      const { musicKey, scale }= bars[currentBar]\n      const keyIDX = KeysToRootNoteMap[musicKey]\n      const { intervals } = ScaleType.get(scale)\n      const semitones = intervals.map(interval => {\n        return Interval.semitones(interval)\n      })\n\n      // @ts-ignore\n      // eslint-disable-next-line\n      external.invoke(`set ${keyIDX} [${semitones.join(\",\")}]`)\n    }\n  }, [currentBar])\n\n  return (\n    <Wrapper className=\"App\">\n      <InputsWrapper>\n        <TemposWrapper>\n          <Input\n            disabled={icon === 'stop'}\n            label='Tempo (BPM)'\n            value={tempo}\n            onChange={e => {\n              setTempo(Number(e.currentTarget.value))\n            }}\n          />\n          <Input\n            disabled={icon === 'stop'}\n            label='Beats per Bar'\n            value={beatsPerBar}\n            onChange={e => {\n              setBeatsPerBar(Number(e.currentTarget.value))\n            }}\n          />\n        </TemposWrapper>\n        <Icon \n          // @ts-ignore\n          name={icon} \n          size='huge' \n          onClick={() => {\n            if (icon === 'play') {\n              setIcon('stop')\n            } else {\n              setIcon('play')\n            }\n          }}\n          style={{ cursor: 'pointer' }} \n        />\n      </InputsWrapper>\n      <BarsWrapper>\n        <CurrentLocationMarker \n            top={`${top}px`}\n            left={`${left}px`}\n            transitionDuration={`${transitionTime}ms`}\n        />\n        {(bars as BarState[]).map((bar, idx) => (\n          <BarAndSelectors\n            key={idx}\n            disableSelectors={icon === 'stop'}\n\n            musicKey={bar.musicKey}\n            onKeyChange={(key: string) => { handleKeyChange(idx, key) }}\n\n            scale={bar.scale}\n            onScaleChange={(scale: string) => { handleScaleChange(idx, scale) }}\n\n            hasClef={idx % 4 === 0}\n            hasRepeat={idx === bars.length - 1}\n\n            showRemoveIcon={icon !== 'stop'}\n            remove={() => { \n              if (icon !== 'stop') {\n                dispatch({ idx, type: 'REMOVE_BAR', data: '' }) \n              }\n            }}\n          />\n        ))}\n      </BarsWrapper>\n      <div>\n        <Button\n          primary\n          disabled={icon === 'stop'}\n          onClick={() => { dispatch({ idx: -1, type: 'ADD_BAR', data: '' }) }}\n        >\n          Add Bar\n        </Button>\n      </div>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","/Users/music/apps/in-tune/ui/src/Keys/index.ts",[],"/Users/music/apps/in-tune/ui/src/Components/BarAndSelectors/index.ts",[],"/Users/music/apps/in-tune/ui/src/Keys/keys.ts",[],"/Users/music/apps/in-tune/ui/src/Components/BarAndSelectors/BarAndSelectors.tsx",[],"/Users/music/apps/in-tune/ui/src/Components/MusicNotation/Bar/index.ts",[],"/Users/music/apps/in-tune/ui/src/Components/Selectors/Keys/index.ts",[],"/Users/music/apps/in-tune/ui/src/Components/Selectors/Scales/index.ts",[],"/Users/music/apps/in-tune/ui/src/Components/MusicNotation/Bar/Bar.tsx",[],"/Users/music/apps/in-tune/ui/src/Components/Selectors/Keys/Keys.tsx",[],["60","61"],"/Users/music/apps/in-tune/ui/src/Components/Selectors/Scales/Scales.tsx",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":121,"column":10,"nodeType":"68","messageId":"69","endLine":121,"endColumn":19},{"ruleId":"66","severity":1,"message":"70","line":126,"column":10,"nodeType":"68","messageId":"69","endLine":126,"endColumn":19},{"ruleId":"71","severity":1,"message":"72","line":178,"column":6,"nodeType":"73","endLine":178,"endColumn":12,"suggestions":"74"},{"ruleId":"71","severity":1,"message":"75","line":216,"column":6,"nodeType":"73","endLine":216,"endColumn":18,"suggestions":"76"},{"ruleId":"71","severity":1,"message":"77","line":236,"column":6,"nodeType":"73","endLine":236,"endColumn":18,"suggestions":"78"},{"ruleId":"62","replacedBy":"79"},{"ruleId":"64","replacedBy":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"@typescript-eslint/no-unused-vars","'msPerBeat' is assigned a value but never used.","Identifier","unusedVar","'startTime' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'bars.length', 'intrvl', and 'msPerBar'. Either include them or remove the dependency array.","ArrayExpression",["83"],"React Hook useEffect has missing dependencies: 'bars.length', 'currentRow', and 'msPerBar'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTransitionTime' needs the current value of 'msPerBar'.",["84"],"React Hook useEffect has a missing dependency: 'bars'. Either include it or remove the dependency array.",["85"],["81"],["82"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [bars.length, icon, intrvl, msPerBar]",{"range":"92","text":"93"},"Update the dependencies array to be: [left, icon, bars.length, currentRow, msPerBar]",{"range":"94","text":"95"},"Update the dependencies array to be: [bars, currentBar]",{"range":"96","text":"97"},[4211,4217],"[bars.length, icon, intrvl, msPerBar]",[5112,5124],"[left, icon, bars.length, currentRow, msPerBar]",[5658,5670],"[bars, currentBar]"]